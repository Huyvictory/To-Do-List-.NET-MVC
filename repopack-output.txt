This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-09-08T16:11:20.360Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
.repopackignore
Entities/Entities.csproj
Entities/ToDoItem.cs
Infrastructure/Data/ToDoDbContext.cs
Infrastructure/Infrastructure.csproj
Infrastructure/Repository/InMemoryToDoItemRepository.cs
Infrastructure/Repository/SqlServerToDoItemRepository.cs
Infrastructure/UnitOfWork/InMemoryUnitOfWork.cs
Infrastructure/UnitOfWork/SqlServerUnitOfWork.cs
repopack.config.json
ToDoList.sln
ToDoList/appsettings.Development.json
ToDoList/appsettings.json
ToDoList/Controllers/HomeController.cs
ToDoList/GlobalUsings.cs
ToDoList/Migrations/20240907154358_InitialCreate.cs
ToDoList/Migrations/20240907154358_InitialCreate.Designer.cs
ToDoList/Migrations/ToDoDbContextModelSnapshot.cs
ToDoList/Models/ErrorViewModel.cs
ToDoList/Models/TodoItemsListViewModel.cs
ToDoList/Models/ToDoItemViewModel.cs
ToDoList/Program.cs
ToDoList/Properties/launchSettings.json
ToDoList/ToDoList.csproj
ToDoList/Views/_ViewImports.cshtml
ToDoList/Views/_ViewStart.cshtml
ToDoList/Views/Home/Create.cshtml
ToDoList/Views/Home/Edit.cshtml
ToDoList/Views/Home/Index.cshtml
ToDoList/Views/Shared/_Layout.cshtml
ToDoList/Views/Shared/_Layout.cshtml.css
ToDoList/Views/Shared/_ValidationScriptsPartial.cshtml
ToDoList/Views/Shared/Error.cshtml
UnitTest/GlobalUsings.cs
UnitTest/Repository/InMemoryToDoItemRepositoryTests.cs
UnitTest/Repository/SqlServerToDoItemRepositoryTests.cs
UnitTest/ToDoListManagerTests.cs
UnitTest/UnitOfWork/InMemoryUnitOfWorkTests.cs
UnitTest/UnitOfWork/SqlServerUnitOfWorkTests.cs
UnitTest/UnitTest.csproj
UseCases/IToDoItemRepository.cs
UseCases/IUnitOfWork.cs
UseCases/ToDoListManager.cs
UseCases/UseCases.csproj

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# Ignore build output directories
bin/
obj/

# Ignore files built by Visual Studio / Rider
*.user
*.aps
*.pch
*.vspscc
*_i.c
*_p.c
*.ncb
*.suo
*.tlb
*.tlh
*.bak
*.cache
*.ilk
*.log
*.lib
*.sbr
*.sdf
.vs/
.idea/
_ReSharper*/

# Ignore NuGet packages
packages/

# Ignore build results
[Dd]ebug/
[Rr]elease/
x64/
x86/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Ll]og/

# Ignore Visual Studio profiler
*.psess
*.vsp
*.vspx
*.sap

# Ignore Rider-specific files
.idea/
*.sln.iml

# Ignore OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Ignore wwwroot directory
wwwroot/

================
File: .repopackignore
================
# Add patterns to ignore here, one per line
# Example:
# *.log
# tmp/

================
File: Entities/Entities.csproj
================
<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>net8.0</TargetFramework>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>
    </PropertyGroup>

</Project>

================
File: Entities/ToDoItem.cs
================
namespace Entities;

public class ToDoItem
{
    public string Id { get; set; } = Guid.NewGuid().ToString();
    public required string Description { get; set; }
    public bool IsCompleted { get; set; }
}

================
File: Infrastructure/Data/ToDoDbContext.cs
================
using Entities;
using Microsoft.EntityFrameworkCore;

namespace Infrastructure.Data;

public class ToDoDbContext : Microsoft.EntityFrameworkCore.DbContext
{
    public ToDoDbContext(DbContextOptions<ToDoDbContext> options) : base(options)
    {
    }

    public DbSet<ToDoItem> ToDoItems { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ToDoItem>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Id).IsRequired().HasMaxLength(36);
            entity.Property(e => e.Description).IsRequired().HasMaxLength(500);
        });
    }
}

================
File: Infrastructure/Infrastructure.csproj
================
<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>net8.0</TargetFramework>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>
    </PropertyGroup>

    <ItemGroup>
      <ProjectReference Include="..\Entities\Entities.csproj" />
      <ProjectReference Include="..\UseCases\UseCases.csproj" />
    </ItemGroup>

    <ItemGroup>
      <PackageReference Include="Microsoft.EntityFrameworkCore" Version="8.0.8" />
      <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.0.8">
        <PrivateAssets>all</PrivateAssets>
        <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      </PackageReference>
    </ItemGroup>

</Project>

================
File: Infrastructure/Repository/InMemoryToDoItemRepository.cs
================
using Entities;
using UseCases;

namespace Infrastructure.Repository;

public class InMemoryToDoItemRepository : IToDoItemRepository
{
    private readonly List<ToDoItem> _items = new List<ToDoItem>();

    public async Task<IEnumerable<ToDoItem>> GetAllAsync()
    {
        return await Task.FromResult(_items);
    }

    public async Task<ToDoItem?> GetByIdAsync(string id)
    {
        return await Task.FromResult(_items.FirstOrDefault(i => i.Id == id));
    }

    public async Task AddAsync(ToDoItem toDoItem)
    {
        _items.Add(toDoItem);
        await Task.CompletedTask;
    }

    public async Task UpdateAsync(ToDoItem toDoItem)
    {
        var existingItem = _items.FirstOrDefault(i => i.Id == toDoItem.Id);
        if (existingItem != null)
        {
            existingItem.Description = toDoItem.Description;
            existingItem.IsCompleted = toDoItem.IsCompleted;
        }

        await Task.CompletedTask;
    }

    public async Task DeleteAsync(string id)
    {
        var item = _items.FirstOrDefault(i => i.Id == id);
        if (item != null)
        {
            _items.Remove(item);
        }

        await Task.CompletedTask;
    }
}

================
File: Infrastructure/Repository/SqlServerToDoItemRepository.cs
================
using Entities;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using UseCases;

namespace Infrastructure.Repository;

public class SqlServerToDoItemRepository : IToDoItemRepository
{
    private readonly ToDoDbContext _context;

    public SqlServerToDoItemRepository(ToDoDbContext context)
    {
        _context = context;
    }

    public async Task<IEnumerable<ToDoItem>> GetAllAsync()
    {
        return await _context.ToDoItems.ToListAsync();
    }

    public async Task<ToDoItem?> GetByIdAsync(string id)
    {
        return await _context.ToDoItems.FindAsync(id);
    }

    public async Task AddAsync(ToDoItem toDoItem)
    {
        await _context.ToDoItems.AddAsync(toDoItem);
    }

    public async Task UpdateAsync(ToDoItem toDoItem)
    {
        var existingItem = await _context.ToDoItems.FindAsync(toDoItem.Id);
        if (existingItem == null)
        {
            throw new ArgumentException($"An item with id {toDoItem.Id} was not found.", nameof(toDoItem));
        }

        _context.Entry(existingItem).CurrentValues.SetValues(toDoItem);

        await Task.CompletedTask;
    }

    public async Task DeleteAsync(string id)
    {
        var toDoItem = await _context.ToDoItems.FindAsync(id);
        if (toDoItem != null)
        {
            _context.ToDoItems.Remove(toDoItem);
        }
    }
}

================
File: Infrastructure/UnitOfWork/InMemoryUnitOfWork.cs
================
using Infrastructure.Repository;
using UseCases;

namespace Infrastructure.UnitOfWork;

public class InMemoryUnitOfWork : IUnitOfWork
{
    public IToDoItemRepository ToDoItems { get; }

    public InMemoryUnitOfWork()
    {
        ToDoItems = new InMemoryToDoItemRepository();
    }

    public Task<int> CompleteAsync()
    {
        // For in-memory repository, changes are immediate, so we just return a completed task
        return Task.FromResult(1);
    }

    public ValueTask DisposeAsync()
    {
        return ValueTask.CompletedTask;
    }
}

================
File: Infrastructure/UnitOfWork/SqlServerUnitOfWork.cs
================
using Infrastructure.Data;
using Infrastructure.Repository;
using UseCases;

namespace Infrastructure.UnitOfWork;

public class SqlServerUnitOfWork : IUnitOfWork
{
    private readonly ToDoDbContext _context;
    public IToDoItemRepository ToDoItems { get; }

    public SqlServerUnitOfWork(ToDoDbContext context)
    {
        _context = context;
        ToDoItems = new SqlServerToDoItemRepository(_context);
    }

    public async Task<int> CompleteAsync()
    {
        return await _context.SaveChangesAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await _context.DisposeAsync();
    }
}

================
File: repopack.config.json
================
{
  "output": {
    "filePath": "repopack-output.txt",
    "style": "plain",
    "removeComments": false,
    "removeEmptyLines": false,
    "topFilesLength": 5,
    "showLineNumbers": false
  },
  "include": [],
  "ignore": {
    "useGitignore": true,
    "useDefaultPatterns": true,
    "customPatterns": []
  }
}

================
File: ToDoList.sln
================
Microsoft Visual Studio Solution File, Format Version 12.00
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Entities", "Entities\Entities.csproj", "{703BA074-3473-4B8B-89F6-DA4E2E5D5DFA}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "UseCases", "UseCases\UseCases.csproj", "{B584C15C-E633-4514-8C24-44F257085B9C}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Infrastructure", "Infrastructure\Infrastructure.csproj", "{EA9C9380-FC9E-4B70-A469-21EC6F117C42}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "ToDoList", "ToDoList\ToDoList.csproj", "{043C6CE7-A23F-4A52-839A-BB3F96DA12B5}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "UnitTest", "UnitTest\UnitTest.csproj", "{18844F8E-45B9-4DCE-BDEC-ACDE9A4993B5}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{703BA074-3473-4B8B-89F6-DA4E2E5D5DFA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{703BA074-3473-4B8B-89F6-DA4E2E5D5DFA}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{703BA074-3473-4B8B-89F6-DA4E2E5D5DFA}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{703BA074-3473-4B8B-89F6-DA4E2E5D5DFA}.Release|Any CPU.Build.0 = Release|Any CPU
		{B584C15C-E633-4514-8C24-44F257085B9C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{B584C15C-E633-4514-8C24-44F257085B9C}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{B584C15C-E633-4514-8C24-44F257085B9C}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{B584C15C-E633-4514-8C24-44F257085B9C}.Release|Any CPU.Build.0 = Release|Any CPU
		{EA9C9380-FC9E-4B70-A469-21EC6F117C42}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{EA9C9380-FC9E-4B70-A469-21EC6F117C42}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{EA9C9380-FC9E-4B70-A469-21EC6F117C42}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{EA9C9380-FC9E-4B70-A469-21EC6F117C42}.Release|Any CPU.Build.0 = Release|Any CPU
		{043C6CE7-A23F-4A52-839A-BB3F96DA12B5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{043C6CE7-A23F-4A52-839A-BB3F96DA12B5}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{043C6CE7-A23F-4A52-839A-BB3F96DA12B5}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{043C6CE7-A23F-4A52-839A-BB3F96DA12B5}.Release|Any CPU.Build.0 = Release|Any CPU
		{18844F8E-45B9-4DCE-BDEC-ACDE9A4993B5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{18844F8E-45B9-4DCE-BDEC-ACDE9A4993B5}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{18844F8E-45B9-4DCE-BDEC-ACDE9A4993B5}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{18844F8E-45B9-4DCE-BDEC-ACDE9A4993B5}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
EndGlobal

================
File: ToDoList/appsettings.Development.json
================
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}

================
File: ToDoList/appsettings.json
================
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
    "DefaultConnection": "Data Source=HUYVICTORY-PC;Initial Catalog=ToDoList;Persist Security Info=True;User ID=sa;Password=12345;Trust Server Certificate=True"
  }
}

================
File: ToDoList/Controllers/HomeController.cs
================
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using ToDoList.Models;

namespace ToDoList.Controllers;

public class HomeController : Controller
{
    private readonly ILogger<HomeController> _logger;
    private readonly ToDoListManager _toDoListManager;

    public HomeController(ILogger<HomeController> logger, ToDoListManager toDoListManager)
    {
        _logger = logger;
        _toDoListManager = toDoListManager;
    }

    public async Task<IActionResult> Index()
    {
        var toDoItems = await _toDoListManager.GetToDoItemsList();
        _logger.LogInformation($"Retrieved {toDoItems.Count()} items");
        return View(new TodoItemsListViewModel
        {
            ListToDoItems = toDoItems.Select(i => new ToDoItemViewModel()
                { Id = i.Id, Description = i.Description, IsCompleted = i.IsCompleted }).ToList()
        });
    }

    [HttpGet]
    public IActionResult Create()
    {
        return View();
    }

    [HttpPost]
    public async Task<IActionResult> Create(ToDoItemViewModel toDoItemViewModel)
    {
        if (ModelState.IsValid)
        {
            await _toDoListManager.AddToDoItem(new ToDoItem()
            {
                Id = toDoItemViewModel.Id,
                Description = toDoItemViewModel.Description,
                IsCompleted = false
            });
        }

        return RedirectToAction("Index");
    }

    [HttpGet]
    public async Task<IActionResult> Edit(string id)
    {
        var todoItem = await _toDoListManager.GetById(id);
        if (todoItem == null)
        {
            return NotFound();
        }

        return View(new ToDoItemViewModel()
        {
            Id = todoItem.Id,
            Description = todoItem.Description,
            IsCompleted = todoItem.IsCompleted
        });
    }

    // POST: Home/Edit/5
    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> Edit(string id, [Bind("Id,Description,IsCompleted")] ToDoItemViewModel todoItem)
    {
        if (id != todoItem.Id)
        {
            return NotFound();
        }

        if (ModelState.IsValid)
        {
            try
            {
                await _toDoListManager.Update(new ToDoItem()
                {
                    Id = todoItem.Id,
                    Description = todoItem.Description,
                    IsCompleted = todoItem.IsCompleted
                });
            }
            catch (Exception)
            {
                if (await _toDoListManager.GetById(todoItem.Id) == null)
                {
                    return NotFound();
                }

                throw;
            }

            return RedirectToAction(nameof(Index));
        }

        return View(todoItem);
    }

    public async Task<IActionResult> ToggleComplete(string id)
    {
        await _toDoListManager.ToggleCompleted(id);

        return RedirectToAction("Index");
    }

    [HttpPost]
    public async Task<IActionResult> Delete(string id)
    {
        await _toDoListManager.Delete(id);

        return RedirectToAction("Index");
    }

    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    public IActionResult Error()
    {
        return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
    }
}

================
File: ToDoList/GlobalUsings.cs
================
global using Entities;
global using UseCases;
global using Infrastructure;

================
File: ToDoList/Migrations/20240907154358_InitialCreate.cs
================
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace ToDoList.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "ToDoItems",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(36)", maxLength: 36, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    IsCompleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToDoItems", x => x.Id);
                });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "ToDoItems");
        }
    }
}

================
File: ToDoList/Migrations/20240907154358_InitialCreate.Designer.cs
================
// <auto-generated />

using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ToDoList.Migrations
{
    [DbContext(typeof(ToDoDbContext))]
    [Migration("20240907154358_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.ToDoItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ToDoItems");
                });
#pragma warning restore 612, 618
        }
    }
}

================
File: ToDoList/Migrations/ToDoDbContextModelSnapshot.cs
================
// <auto-generated />

using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ToDoList.Migrations
{
    [DbContext(typeof(ToDoDbContext))]
    partial class ToDoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.ToDoItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ToDoItems");
                });
#pragma warning restore 612, 618
        }
    }
}

================
File: ToDoList/Models/ErrorViewModel.cs
================
namespace ToDoList.Models;

public class ErrorViewModel
{
    public string? RequestId { get; set; }

    public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
}

================
File: ToDoList/Models/TodoItemsListViewModel.cs
================
namespace ToDoList.Models;

public class TodoItemsListViewModel
{
    public required IEnumerable<ToDoItemViewModel> ListToDoItems { get; init; }
}

================
File: ToDoList/Models/ToDoItemViewModel.cs
================
namespace ToDoList.Models;

public class ToDoItemViewModel
{
    public string Id { get; set; } = Guid.NewGuid().ToString();
    public required string Description { get; set; }
    public bool IsCompleted { get; set; }
}

================
File: ToDoList/Program.cs
================
using Infrastructure.Data;
using Infrastructure.UnitOfWork;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllersWithViews();

// Implement In Memory Unit of Work (InMemoryUnitOfWork)
builder.Services.AddSingleton<IUnitOfWork, InMemoryUnitOfWork>();

// Implement Sql Server Unit of Work (SqlServerUnitOfWork)
// builder.Services.AddDbContext<ToDoDbContext>(options =>
//     options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));
//
// builder.Services.AddScoped<IUnitOfWork, SqlServerUnitOfWork>();

builder.Services.AddScoped<ToDoListManager>();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();

================
File: ToDoList/Properties/launchSettings.json
================
{
  "$schema": "http://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:38343",
      "sslPort": 44393
    }
  },
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "applicationUrl": "http://localhost:5129",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "applicationUrl": "https://localhost:7093;http://localhost:5129",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}

================
File: ToDoList/ToDoList.csproj
================
<Project Sdk="Microsoft.NET.Sdk.Web">

    <PropertyGroup>
        <TargetFramework>net8.0</TargetFramework>
        <Nullable>enable</Nullable>
        <ImplicitUsings>enable</ImplicitUsings>
    </PropertyGroup>

    <ItemGroup>
      <ProjectReference Include="..\Entities\Entities.csproj" />
      <ProjectReference Include="..\Infrastructure\Infrastructure.csproj" />
      <ProjectReference Include="..\UseCases\UseCases.csproj" />
    </ItemGroup>

    <ItemGroup>
      <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="8.0.8" />
      <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.0.8">
        <PrivateAssets>all</PrivateAssets>
        <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      </PackageReference>
    </ItemGroup>

    <ItemGroup>
      <Folder Include="DbContext\" />
    </ItemGroup>

</Project>

================
File: ToDoList/Views/_ViewImports.cshtml
================
@using ToDoList
@using ToDoList.Models
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

================
File: ToDoList/Views/_ViewStart.cshtml
================
@{
    Layout = "_Layout";
}

================
File: ToDoList/Views/Home/Create.cshtml
================
@model ToDoItemViewModel

<!DOCTYPE html>

<html>
<head>
    <title>Create To-Do Item</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
<div class="container">
    <h2>Create a new To-Do Item</h2>
    <form asp-action="Create" method="post" class="mt-4">
        <div class="form-group">
            <label asp-for="Description" class="control-label">Description</label>
            <input asp-for="Description" class="form-control"/>
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>
        <button type="submit" class="btn btn-primary">Create</button>
        <a href="/home" class="btn btn-primary">Cancel</a>
    </form>
</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.2/dist/jquery.validate.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery-validation-unobtrusive@3.2.11/dist/jquery.validate.unobtrusive.min.js"></script>
</body>
</html>

================
File: ToDoList/Views/Home/Edit.cshtml
================
@model ToDoItemViewModel

<h2>Edit Todo Item</h2>

<form asp-controller="Home" asp-action="Edit">
    <input type="hidden" asp-for="Id"/>
    <div class="form-group">
        <label asp-for="Description" class="control-label"></label>
        <input asp-for="Description" class="form-control"/>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>
    <div class="form-group form-check">
        <label class="form-check-label">
            <input class="form-check-input" asp-for="IsCompleted"/> @Html.DisplayNameFor(model => model.IsCompleted)
        </label>
    </div>
    <div class="form-group">
        <input type="submit" value="Save" class="btn btn-primary"/>
        <a asp-action="Index" class="btn btn-secondary">Cancel</a>
    </div>
</form>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}

================
File: ToDoList/Views/Home/Index.cshtml
================
@model ToDoList.Models.TodoItemsListViewModel

@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">To do list</h1>

    <p>This is a simple to do list application. Using clean architecture principles.</p>
    @if (Model.ListToDoItems.Any())
    {
        <table class="table table-striped">
            <thead>
            <tr>
                <th>ID</th>
                <th>Description</th>
                <th>Completed</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in Model.ListToDoItems)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Description</td>
                    <td>
                        <input type="checkbox" disabled @(item.IsCompleted ? "checked" : "")/>
                    </td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-primary">Edit</a>
                        <a asp-action="ToggleComplete" asp-route-id="@item.Id" class="btn btn-sm btn-success">
                            Toggle Complete
                        </a>
                        <form class="d-inline" asp-action="Delete" asp-route-id="@item.Id" method="post" onsubmit="return confirm('Are you sure you want to delete this item?');">
                            <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                        </form>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <div class="alert alert-info" role="alert">
            No to-do items available. Create a new task to get started!
        </div>
    }

    <button class="btn btn-primary" onclick="location.href='@Url.Action("Create", "Home")'">Create a new To-Do Item</button>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            $('.delete-todo').click(function() {
                var todoId = $(this).data('id');
                var button = $(this);
                if (confirm('Are you sure you want to delete this item?')) {
                    $.ajax({
                        url: '@Url.Action("Delete", "Home")',
                        type: 'POST',
                        data: { id: todoId },
                        success: function(result) {
                        console.log(result);
                            if (result.success) {
                                // Remove the table row
                                button.closest('tr').remove();
                                if ($('table tbody tr').length === 0) {
                                    location.reload(); // Reload if all items are deleted
                                }
                            } else {
                                alert('Error deleting item: ' + result.message);
                            }
                        }.bind(this),
                        error: function() {
                            alert('Error deleting item.');
                        }
                    });
                }
            });
        });
    </script>
}

================
File: ToDoList/Views/Shared/_Layout.cshtml
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>@ViewData["Title"] - ToDoList</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true"/>
    <link rel="stylesheet" href="~/ToDoList.styles.css" asp-append-version="true"/>
</head>
<body>
<header>
    <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
        <div class="container-fluid">
            <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">ToDoList</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                    aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                <ul class="navbar-nav flex-grow-1">
                    <li class="nav-item">
                        <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
</header>
<div class="container">
    <main role="main" class="pb-3">
        @RenderBody()
    </main>
</div>

<footer class="border-top footer text-muted">
    <div class="container">
        &copy; 2024 - ToDoList
    </div>
</footer>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<script src="~/js/site.js" asp-append-version="true"></script>
@await RenderSectionAsync("Scripts", required: false)
</body>
</html>

================
File: ToDoList/Views/Shared/_Layout.cshtml.css
================
/* Please see documentation at https://learn.microsoft.com/aspnet/core/client-side/bundling-and-minification
for details on configuring this project to bundle and minify static web assets. */

a.navbar-brand {
  white-space: normal;
  text-align: center;
  word-break: break-all;
}

a {
  color: #0077cc;
}

.btn-primary {
  color: #fff;
  background-color: #1b6ec2;
  border-color: #1861ac;
}

.nav-pills .nav-link.active, .nav-pills .show > .nav-link {
  color: #fff;
  background-color: #1b6ec2;
  border-color: #1861ac;
}

.border-top {
  border-top: 1px solid #e5e5e5;
}
.border-bottom {
  border-bottom: 1px solid #e5e5e5;
}

.box-shadow {
  box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05);
}

button.accept-policy {
  font-size: 1rem;
  line-height: inherit;
}

.footer {
  position: absolute;
  bottom: 0;
  width: 100%;
  white-space: nowrap;
  line-height: 60px;
}

================
File: ToDoList/Views/Shared/_ValidationScriptsPartial.cshtml
================
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

================
File: ToDoList/Views/Shared/Error.cshtml
================
@model ErrorViewModel
@{
    ViewData["Title"] = "Error";
}

<h1 class="text-danger">Error.</h1>
<h2 class="text-danger">An error occurred while processing your request.</h2>

@if (Model.ShowRequestId)
{
    <p>
        <strong>Request ID:</strong> <code>@Model.RequestId</code>
    </p>
}

<h3>Development Mode</h3>
<p>
    Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
</p>
<p>
    <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
    It can result in displaying sensitive information from exceptions to end users.
    For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
    and restarting the app.
</p>

================
File: UnitTest/GlobalUsings.cs
================
global using Xunit;

================
File: UnitTest/Repository/InMemoryToDoItemRepositoryTests.cs
================
using Entities;
using Infrastructure.Repository;

namespace UnitTest.Repository;

public class InMemoryToDoItemRepositoryTests
{
    [Fact]
    public async Task InMemoryToDoItemRepository_GetAllAsync_ReturnsAllItems()
    {
        // Arrange
        var repository = new InMemoryToDoItemRepository();

        // Act
        await repository.AddAsync(new ToDoItem() { Description = "Test Item 1", IsCompleted = false });
        await repository.AddAsync(new ToDoItem() { Description = "Test Item 2", IsCompleted = true });
        var items = await repository.GetAllAsync();

        // Assert
        Assert.Equal(2, items.Count());
    }

    [Fact]
    public async Task InMemoryToDoItemRepository_GetByIdAsync_ReturnsItem()
    {
        // Arrange
        var repository = new InMemoryToDoItemRepository();

        // Act
        await repository.AddAsync(new ToDoItem() { Id = "1", Description = "Test Item 1", IsCompleted = false });
        var item = await repository.GetByIdAsync("1");

        // Assert
        Assert.NotNull(item);
        Assert.Equal("1", item!.Id);
    }

    [Fact]
    public async Task InMemoryToDoItemRepository_AddAsync_AddsItem()
    {
        // Arrange
        var repository = new InMemoryToDoItemRepository();

        // Act
        await repository.AddAsync(new ToDoItem() { Description = "Test Item 1", IsCompleted = false });
        var items = await repository.GetAllAsync();

        // Assert
        Assert.Equal("Test Item 1", items.First().Description);
    }

    [Fact]
    public async Task InMemoryToDoItemRepository_UpdateAsync_UpdatesItem()
    {
        // Arrange
        var repository = new InMemoryToDoItemRepository();
        const string mockItemId = "update-id";

        // Act
        await repository.AddAsync(new ToDoItem()
            { Id = mockItemId, Description = "Test Item 1", IsCompleted = false });

        var itemToUpdate = await repository.GetByIdAsync(mockItemId);

        itemToUpdate!.Description = "Updated Item";
        itemToUpdate.IsCompleted = true;

        await repository.UpdateAsync(itemToUpdate);

        var items = await repository.GetAllAsync();

        // Assert
        var toDoItems = items.ToList();
        Assert.Equal("Updated Item", toDoItems.First().Description);
        Assert.True(toDoItems.First().IsCompleted);
    }

    [Fact]
    public async Task InMemoryToDoItemRepository_DeleteAsync_DeletesItem()
    {
        // Arrange
        var repository = new InMemoryToDoItemRepository();
        const string mockItemId = "delete-id";

        // Act
        await repository.AddAsync(new ToDoItem()
            { Id = mockItemId, Description = "Test Item 1", IsCompleted = false });

        await repository.DeleteAsync(mockItemId);

        var items = await repository.GetAllAsync();

        // Assert
        Assert.Empty(items);
    }
}

================
File: UnitTest/Repository/SqlServerToDoItemRepositoryTests.cs
================
using Entities;
using Infrastructure.Data;
using Infrastructure.Repository;
using Microsoft.EntityFrameworkCore;

namespace UnitTest.Repository;

public class SqlServerToDoItemRepositoryTests
{
    private DbContextOptions<ToDoDbContext> CreateNewContextOptions()
    {
        return new DbContextOptionsBuilder<ToDoDbContext>()
            .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
            .Options;
    }

    [Fact]
    public async Task SqlServerToDoItemRepository_GetAllAsync_ReturnsAllItems()
    {
        // Arrange
        var options = CreateNewContextOptions();
        await using var context = new ToDoDbContext(options);
        var repository = new SqlServerToDoItemRepository(context);

        // Act
        await context.ToDoItems.AddAsync(new ToDoItem() { Description = "Test Item 1", IsCompleted = false });
        await context.ToDoItems.AddAsync(new ToDoItem() { Description = "Test Item 2", IsCompleted = true });
        await context.SaveChangesAsync();
        var items = await repository.GetAllAsync();

        // Assert
        Assert.Equal(2, items.Count());
    }

    [Fact]
    public async Task SqlServerToDoItemRepository_GetByIdAsync_ReturnsItem()
    {
        // Arrange
        var options = CreateNewContextOptions();
        await using var context = new ToDoDbContext(options);
        var repository = new SqlServerToDoItemRepository(context);

        // Act
        await context.ToDoItems.AddAsync(new ToDoItem() { Id = "1", Description = "Test Item 1", IsCompleted = false });
        await context.SaveChangesAsync();
        var item = await repository.GetByIdAsync("1");

        // Assert
        Assert.NotNull(item);
        Assert.Equal("1", item!.Id);
    }

    [Fact]
    public async Task SqlServerToDoItemRepository_AddAsync_AddsItem()
    {
        // Arrange
        var options = CreateNewContextOptions();
        await using var context = new ToDoDbContext(options);
        var repository = new SqlServerToDoItemRepository(context);

        // Act
        await repository.AddAsync(new ToDoItem() { Description = "Test Item 1", IsCompleted = false });
        await context.SaveChangesAsync();
        var items = await context.ToDoItems.ToListAsync();

        // Assert
        Assert.Equal("Test Item 1", items.First().Description);
    }

    [Fact]
    public async Task SqlServerToDoItemRepository_UpdateAsync_UpdatesItem()
    {
        // Arrange
        var options = CreateNewContextOptions();
        await using var context = new ToDoDbContext(options);
        var repository = new SqlServerToDoItemRepository(context);
        const string mockItemId = "update-id";

        // Act
        await context.ToDoItems.AddAsync(new ToDoItem()
            { Id = mockItemId, Description = "Test Item 1", IsCompleted = false });
        await context.SaveChangesAsync();

        var itemToUpdate = await repository.GetByIdAsync(mockItemId);

        itemToUpdate!.Description = "Updated Item";
        itemToUpdate.IsCompleted = true;

        await repository.UpdateAsync(itemToUpdate);
        await context.SaveChangesAsync();

        var items = await repository.GetAllAsync();

        // Assert
        var toDoItems = items.ToList();
        Assert.Equal("Updated Item", toDoItems.First().Description);
        Assert.True(toDoItems.First().IsCompleted);
    }

    [Fact]
    public async Task SqlServerToDoItemRepository_DeleteAsync_DeletesItem()
    {
        // Arrange
        var options = CreateNewContextOptions();
        await using var context = new ToDoDbContext(options);
        var repository = new SqlServerToDoItemRepository(context);
        const string mockItemId = "delete-id";

        // Act
        await context.ToDoItems.AddAsync(new ToDoItem()
            { Id = mockItemId, Description = "Test Item 1", IsCompleted = false });
        await context.SaveChangesAsync();

        await repository.DeleteAsync(mockItemId);
        await context.SaveChangesAsync();

        var items = await repository.GetAllAsync();

        // Assert
        Assert.Empty(items);
    }
}

================
File: UnitTest/ToDoListManagerTests.cs
================
using Entities;
using Moq;
using UseCases;

namespace UnitTest;

public class ToDoListManagerTests
{
    private readonly Mock<IUnitOfWork> _mockUnitOfWork;
    private readonly Mock<IToDoItemRepository> _mockRepository;
    private readonly ToDoListManager _manager;

    public ToDoListManagerTests()
    {
        _mockRepository = new Mock<IToDoItemRepository>();
        _mockUnitOfWork = new Mock<IUnitOfWork>();
        _mockUnitOfWork.Setup(uow => uow.ToDoItems).Returns(_mockRepository.Object);
        _manager = new ToDoListManager(_mockUnitOfWork.Object);
    }

    [Fact]
    public async Task GetToDoItemsList_ReturnsAllItems()
    {
        // Arrange
        var expectedItems = new List<ToDoItem>()
        {
            new() { Id = "1", Description = "Test Item 1", IsCompleted = false },
            new() { Id = "2", Description = "Test Item 2", IsCompleted = true }
        };

        _mockRepository.Setup(r => r.GetAllAsync()).ReturnsAsync(expectedItems);

        // Act
        var result = await _manager.GetToDoItemsList();

        // Assert
        Assert.Equal(expectedItems, result);
    }

    [Fact]
    public async Task AddToDoItem_CallsRepositoryAndCompletes()
    {
        // Arrange
        var toDoItem = new ToDoItem() { Description = "Test Item", IsCompleted = false };

        // Act
        await _manager.AddToDoItem(toDoItem);

        // Assert
        _mockRepository.Verify(r => r.AddAsync(toDoItem), Times.Once);
        _mockUnitOfWork.Verify(u => u.CompleteAsync(), Times.Once);
    }

    [Fact]
    public async Task ToggleCompleted_UpdatesItemAndCompletes()
    {
        // Arrange
        var toDoItem = new ToDoItem() { Description = "Test Item", IsCompleted = false };
        _mockRepository.Setup(r => r.GetByIdAsync(toDoItem.Id)).ReturnsAsync(toDoItem);

        // Act
        await _manager.ToggleCompleted(toDoItem.Id);

        // Assert
        Assert.True(toDoItem.IsCompleted);
        _mockRepository.Verify(r => r.UpdateAsync(toDoItem), Times.Once);
        _mockUnitOfWork.Verify(u => u.CompleteAsync(), Times.Once);
    }

    [Fact]
    public async Task Delete_ConfirmItemsExistsAndCompletes()
    {
        // Arrange
        var toDoItem = new ToDoItem() { Description = "Test Item", IsCompleted = false };
        _mockRepository.Setup(r => r.GetByIdAsync(toDoItem.Id)).ReturnsAsync(toDoItem);

        // Act
        await _manager.Delete(toDoItem.Id);

        // Assert
        _mockRepository.Verify(r => r.DeleteAsync(toDoItem.Id), Times.Once);
        _mockUnitOfWork.Verify(u => u.CompleteAsync(), Times.Once);
    }
}

================
File: UnitTest/UnitOfWork/InMemoryUnitOfWorkTests.cs
================
using Entities;
using Infrastructure.Repository;
using Infrastructure.UnitOfWork;

namespace UnitTest.UnitOfWork;

public class InMemoryUnitOfWorkTests
{
    [Fact]
    public async Task InMemoryUnitOfWork_CompleteAsync_ReturnsOne()
    {
        // Arrange
        var unitOfWork = new InMemoryUnitOfWork();

        // Act
        var result = await unitOfWork.CompleteAsync();

        // Assert
        Assert.Equal(1, result);
    }

    [Fact]
    public async Task InMemoryUnitOfWork_ToDoItems_ReturnsRepository()
    {
        // Arrange
        var unitOfWork = new InMemoryUnitOfWork();

        // Act
        var repository = unitOfWork.ToDoItems;

        // Assert
        Assert.NotNull(repository);
        Assert.IsType<InMemoryToDoItemRepository>(repository);
    }

    [Fact]
    public async Task InMemoryUnitOfWork_AddAndRetrieveItem_WorksCorrectly()
    {
        // Arrange
        var unitOfWork = new InMemoryUnitOfWork();
        var todoItem = new ToDoItem() { Description = "Test Item", IsCompleted = false };

        // Act
        await unitOfWork.ToDoItems.AddAsync(todoItem);
        await unitOfWork.CompleteAsync();
        var retrievedItems = await unitOfWork.ToDoItems.GetAllAsync();

        // Assert
        var toDoItems = retrievedItems.ToList();
        Assert.Single(toDoItems);
        Assert.Equal(todoItem.Description, toDoItems.First().Description);
    }
}

================
File: UnitTest/UnitOfWork/SqlServerUnitOfWorkTests.cs
================
using Entities;
using Infrastructure.Data;
using Infrastructure.Repository;
using Infrastructure.UnitOfWork;
using Microsoft.EntityFrameworkCore;

namespace UnitTest.UnitOfWork;

public class SqlServerUnitOfWorkTests
{
    private DbContextOptions<ToDoDbContext> CreateNewContextOptions()
    {
        return new DbContextOptionsBuilder<ToDoDbContext>()
            .UseInMemoryDatabase(databaseName: "TestDatabase")
            .Options;
    }

    [Fact]
    public async Task SqlServerUnitOfWork_CompleteAsync_SavesChanges()
    {
        // Arrange
        var options = CreateNewContextOptions();
        await using var context = new ToDoDbContext(options);
        var unitOfWork = new SqlServerUnitOfWork(context);

        var todoItem = new ToDoItem() { Description = "Test Item", IsCompleted = false };

        // Act
        await unitOfWork.ToDoItems.AddAsync(todoItem);
        var saveResult = await unitOfWork.CompleteAsync();

        // Assert
        Assert.Equal(1, saveResult);
        Assert.Single(await context.ToDoItems.ToListAsync());
    }

    [Fact]
    public async Task SqlServerUnitOfWork_ToDoItems_ReturnsRepository()
    {
        // Arrange
        var options = CreateNewContextOptions();
        await using var context = new ToDoDbContext(options);
        var unitOfWork = new SqlServerUnitOfWork(context);

        // Act
        var repository = unitOfWork.ToDoItems;

        // Assert
        Assert.NotNull(repository);
        Assert.IsType<SqlServerToDoItemRepository>(repository);
    }
}

================
File: UnitTest/UnitTest.csproj
================
<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>net8.0</TargetFramework>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>

        <IsPackable>false</IsPackable>
        <IsTestProject>true</IsTestProject>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="8.0.8" />
        <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.6.0"/>
        <PackageReference Include="Moq" Version="4.20.72" />
        <PackageReference Include="xunit" Version="2.4.2"/>
        <PackageReference Include="xunit.runner.visualstudio" Version="2.4.5">
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
            <PrivateAssets>all</PrivateAssets>
        </PackageReference>
        <PackageReference Include="coverlet.collector" Version="6.0.0">
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
            <PrivateAssets>all</PrivateAssets>
        </PackageReference>
    </ItemGroup>

    <ItemGroup>
      <ProjectReference Include="..\Entities\Entities.csproj" />
      <ProjectReference Include="..\Infrastructure\Infrastructure.csproj" />
      <ProjectReference Include="..\ToDoList\ToDoList.csproj" />
      <ProjectReference Include="..\UseCases\UseCases.csproj" />
    </ItemGroup>

</Project>

================
File: UseCases/IToDoItemRepository.cs
================
using Entities;

namespace UseCases;

public interface IToDoItemRepository
{
    Task<IEnumerable<ToDoItem>> GetAllAsync();
    Task<ToDoItem?> GetByIdAsync(string id);
    Task AddAsync(ToDoItem toDoItem);
    Task UpdateAsync(ToDoItem toDoItem);
    Task DeleteAsync(string id);
}

================
File: UseCases/IUnitOfWork.cs
================
namespace UseCases;

public interface IUnitOfWork : IAsyncDisposable
{
    IToDoItemRepository ToDoItems { get; }
    Task<int> CompleteAsync();
}

================
File: UseCases/ToDoListManager.cs
================
using Entities;

namespace UseCases;

public class ToDoListManager
{
    private readonly IUnitOfWork _unitOfWork;

    public ToDoListManager(IUnitOfWork unitOfWork)
    {
        _unitOfWork = unitOfWork;
    }

    public async Task<IEnumerable<ToDoItem>> GetToDoItemsList()
    {
        return await _unitOfWork.ToDoItems.GetAllAsync();
    }

    public async Task<ToDoItem?> GetById(string id)
    {
        return await _unitOfWork.ToDoItems.GetByIdAsync(id);
    }

    public async Task AddToDoItem(ToDoItem toDoItem)
    {
        await _unitOfWork.ToDoItems.AddAsync(toDoItem);
        await _unitOfWork.CompleteAsync();
    }

    public async Task ToggleCompleted(string id)
    {
        var toDoItem = await _unitOfWork.ToDoItems.GetByIdAsync(id);
        if (toDoItem != null)
        {
            toDoItem.IsCompleted = !toDoItem.IsCompleted;
            await _unitOfWork.ToDoItems.UpdateAsync(toDoItem);
            await _unitOfWork.CompleteAsync();
        }
    }

    public async Task Update(ToDoItem toDoItem)
    {
        await _unitOfWork.ToDoItems.UpdateAsync(toDoItem);
        await _unitOfWork.CompleteAsync();
    }

    public async Task Delete(string id)
    {
        var toDoItem = await _unitOfWork.ToDoItems.GetByIdAsync(id);
        if (toDoItem != null)
        {
            await _unitOfWork.ToDoItems.DeleteAsync(id);
            await _unitOfWork.CompleteAsync();
        }
    }
}

================
File: UseCases/UseCases.csproj
================
<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>net8.0</TargetFramework>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>
    </PropertyGroup>

    <ItemGroup>
      <ProjectReference Include="..\Entities\Entities.csproj" />
    </ItemGroup>

</Project>
